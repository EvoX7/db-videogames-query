### JOIN

1. Selezionare i dati di tutti giocatori che hanno scritto almeno una recensione, mostrandoli una sola volta (996)

```sql
SELECT DISTINCT players.*
FROM videogames_db.players
JOIN videogames_db.reviews
ON [players.id](http://players.id/) = reviews.player_id;
```

2. Sezionare tutti i videogame dei tornei tenuti nel 2016, mostrandoli una sola volta (226)

```sql
SELECT DISTINCT videogames.*
FROM videogames_db.videogames
JOIN tournament_videogame
ON [videogames.id](http://videogames.id/) = tournament_videogame.videogame_id
JOIN tournaments
ON tournament_videogame.tournament_id = [tournaments.id](http://tournaments.id/)
WHERE tournaments.year = 2016;
```

3. Mostrare le categorie di ogni videogioco (1718)

```sql
SELECT [videogames.name](http://videogames.name/), [categories.name](http://categories.name/)
FROM videogames_db.videogames
JOIN category_videogame
ON [videogames.id](http://videogames.id/) = category_videogame.videogame_id
JOIN categories
ON category_videogame.category_id = [categories.id](http://categories.id/);
ORDER BY videogames.id
```

4 .Selezionare i dati di tutte le software house che hanno rilasciato almeno un gioco dopo il 2020, mostrandoli una sola volta (6)

```sql
SELECT DISTINCT software_houses.*
FROM videogames_db.software_houses
JOIN videogames
ON software_houses.id = videogames.software_house_id
WHERE videogames.release_date > '2020-01-01';
```

5. Selezionare i premi ricevuti da ogni software house per i videogiochi che ha prodotto (55)

```sql
SELECT software_houses.id, software_houses.name, awards.name
FROM videogames_db.software_houses
JOIN videogames
ON software_houses.id = videogames.software_house_id
JOIN award_videogame
ON videogames.id = award_videogame.videogame_id
JOIN awards
ON award_videogame.award_id = awards.id
ORDER BY software_houses.id
```

6. Selezionare categorie e classificazioni PEGI dei videogiochi che
hanno ricevuto recensioni da 4 e 5 stelle, mostrandole una sola volta
(3363)

```sql
SELECT DISTINCT videogames.name, categories.name, pegi_labels.name
FROM videogames_db.categories
JOIN category_videogame
ON categories.id = category_videogame.category_id
JOIN videogames
ON category_videogame.videogame_id = videogames.id
JOIN reviews
ON videogames.id = reviews.videogame_id
JOIN pegi_label_videogame
ON pegi_label_videogame.videogame_id = videogames.id
JOIN pegi_labels
ON pegi_label_videogame.pegi_label_id = pegi_labels.id
WHERE reviews.rating = 4 OR reviews.rating = 5
```

7. Selezionare quali giochi erano presenti nei tornei nei quali hanno partecipato i giocatori il cui nome inizia per 'S' (474)

```sql
SELECT DISTINCT videogames.*
FROM videogames_db.players
	JOIN player_tournament
		ON players.id = player_tournament.player_id
	JOIN tournaments
		ON player_tournament.tournament_id = tournaments.id
	JOIN tournament_videogame
		ON tournaments.id = tournament_videogame.tournament_id
	JOIN videogames
		ON tournament_videogame.videogame_id = videogames.id
WHERE players.name LIKE 's%'
```

8. Selezionare le citta’ in cui e’ stato giocato il gioco dell'anno del 2018 (36)

```sql
SELECT awards.id, awards.name, award_videogame.year, videogames.id, videogames.name, tournaments.name, tournaments.city
FROM videogames_db.awards
	JOIN award_videogame
		ON awards.id = award_videogame.award_id
	JOIN videogames
		ON award_videogame.videogame_id = videogames.id
	JOIN tournament_videogame
		ON videogames.id = tournament_videogame.videogame_id
	JOIN tournaments
		ON tournament_videogame.tournament_id = tournaments.id
WHERE awards.name LIKE "Gioco dell'anno"AND award_videogame.year = 2018
```

9. Selezionare i giocatori che hanno giocato al gioco piu’ atteso del 2018 in un torneo del 2019 (3306)
SELECT tournaments.id, tournaments.name, tournaments.year, players.name, players.lastname, players.nickname
FROM videogames_db.awards
	JOIN award_videogame
		ON awards.id = award_videogame.award_id
	JOIN videogames
		ON award_videogame.videogame_id = videogames.id
	JOIN tournament_videogame
		ON videogames.id = tournament_videogame.videogame_id
	JOIN tournaments
		ON tournament_videogame.tournament_id = tournaments.id
	JOIN player_tournament
		ON tournaments.id = player_tournament.tournament_id
	JOIN players
		ON player_tournament.player_id = players.id
WHERE awards.name LIKE "Gioco più atteso"AND award_videogame.year = 2018
    AND tournaments.year = 2019

BONUS
    1. Selezionare i dati della prima software house che ha rilasciato un
gioco, assieme ai dati del gioco stesso (software house id : 5)

```sql
SELECT software_houses.*, videogames.*
FROM videogames_db.videogames
	JOIN software_houses
		ON videogames.software_house_id = software_houses.id
ORDER BY release_date
LIMIT 1;
```